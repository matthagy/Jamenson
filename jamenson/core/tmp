eval (progn (call (read_binding (global builtins:require :0x550d70)) 'bootstrap0) (call (read_binding (global builtins:require :0x54d450)) 'backq) (call (read_binding (global builtins:require :0x5590f0)) 'bootstrap1) (call (read_binding (global builtins:require :0x5593b0)) 'ops) (call (read_binding (global builtins:require :0x559670)) 'cxr))
eval (write_binding (global ll-dispatch :0x62c5f0) (call (read_binding (global builtins:MacroFunction :0x635150)) (function (progn (write_binding (local #:%ptr2 :0x63a150) (call (read_binding (global builtins:clist :0x644c90)) &rest (read_binding (local #:form1 :0x644610)))) (write_binding (local patterns :0x63f670) nil) (write_binding (local #:subdestruct3 :0x64d1f0) nil) (write_binding (local #:subdestruct3 :0x64d1f0) (attrget "car" (read_binding (local #:%ptr2 :0x63a150)))) (write_binding (local #:%ptr2 :0x63a150) (attrget "cdr" (read_binding (local #:%ptr2 :0x63a150)))) (write_binding (local patterns :0x63f670) (read_binding (local #:%ptr2 :0x63a150))) (write_binding (local #:%ptr4 :0x66c6f0) (read_binding (local #:subdestruct3 :0x64d1f0))) (write_binding (local el-sym :0x66c7b0) nil) (write_binding (local state-sym :0x66c830) nil) (write_binding (local state-sym :0x66c830) (attrget "car" (read_binding (local #:%ptr4 :0x66c6f0)))) (write_binding (local #:%ptr4 :0x66c6f0) (attrget "cdr" (read_binding (local #:%ptr4 :0x66c6f0)))) (write_binding (local el-sym :0x66c7b0) (attrget "car" (read_binding (local #:%ptr4 :0x66c6f0)))) (write_binding (local #:%ptr4 :0x66c6f0) (attrget "cdr" (read_binding (local #:%ptr4 :0x66c6f0)))) (write_binding (local acc :0x66cfb0) nil) (write_binding (local #:ptr5 :0x674590) (read_binding (local patterns :0x63f670))) (tagbody ((None :0x0) nop) ((#:top-loop6 :0x1) (progn (if (not_ (is_ (read_binding (local #:ptr5 :0x674590)) nil)) nil (go (#:exit-loop7 :0x2))) (write_binding (local pat :0x674a50) (attrget "car" (read_binding (local #:ptr5 :0x674590)))) (write_binding (local #:%ptr8 :0x656a30) (read_binding (local pat :0x674a50))) (write_binding (local body :0x656a50) nil) (write_binding (local #:subdestruct9 :0x657b10) nil) (write_binding (local #:subdestruct9 :0x657b10) (attrget "car" (read_binding (local #:%ptr8 :0x656a30)))) (write_binding (local #:%ptr8 :0x656a30) (attrget "cdr" (read_binding (local #:%ptr8 :0x656a30)))) (write_binding (local body :0x656a50) (read_binding (local #:%ptr8 :0x656a30))) (write_binding (local #:%ptr10 :0x64db10) (read_binding (local #:subdestruct9 :0x657b10))) (write_binding (local el-pat :0x64d850) nil) (write_binding (local state-pat :0x64d8f0) nil) (write_binding (local state-pat :0x64d8f0) (attrget "car" (read_binding (local #:%ptr10 :0x64db10)))) (write_binding (local #:%ptr10 :0x64db10) (attrget "cdr" (read_binding (local #:%ptr10 :0x64db10)))) (write_binding (local el-pat :0x64d850) (attrget "car" (read_binding (local #:%ptr10 :0x64db10)))) (write_binding (local #:%ptr10 :0x64db10) (attrget "cdr" (read_binding (local #:%ptr10 :0x64db10)))) (write_binding (local acc :0x66cfb0) (call (read_binding (global builtins:cons :0x67d0d0)) (call (read_binding (global backq-cons :0x67d470)) (call (read_binding (global backq-list* :0x67d7f0)) 'and (call (read_binding (global make-pat-matcher :0x67dbb0)) (read_binding (local state-sym :0x66c830)) (read_binding (local state-pat :0x64d8f0))) (call (read_binding (global backq-list :0x67df10)) (call (read_binding (global make-pat-matcher :0x682290)) (read_binding (local el-sym :0x66c7b0)) (read_binding (local el-pat :0x64d850))))) (read_binding (local body :0x656a50))) (read_binding (local acc :0x66cfb0)))) (write_binding (local #:ptr5 :0x674590) (attrget "cdr" (read_binding (local #:ptr5 :0x674590)))) (go (#:top-loop6 :0x1)))) ((#:exit-loop7 :0x2) nop)) (write_binding (local acc :0x66cfb0) (call (read_binding (global builtins:cons :0x682750)) (call (read_binding (global backq-cons :0x682a10)) True (call (read_binding (global backq-list :0x682d10)) (call (read_binding (global backq-list* :0x682fd0)) 'error "unhandled dispatch state=%r el=%r" (read_binding (local state-sym :0x66c830)) (call (read_binding (global backq-list :0x688390)) (read_binding (local el-sym :0x66c7b0)))))) (read_binding (local acc :0x66cfb0)))) (call (read_binding (global backq-cons :0x6885b0)) 'cond (call (read_binding (global reverse :0x6888b0)) (read_binding (local acc :0x66cfb0))))) "ll-dispatch" None ([Cons(Symbol('local'), Cons(Symbol('form1'), Cons(Symbol('0x644610'), nil)))]) ([]) None None)))
eval (write_binding (global ll-dispatch :0x628fd0) (call (read_binding (global builtins:MacroFunction :0x628df0)) (function (progn (write_binding (local #:%ptr2 :0x62f670) (call (read_binding (global builtins:clist :0x62f150)) &rest (read_binding (local #:form1 :0x62ca90)))) (write_binding (local patterns :0x62f7b0) nil) (write_binding (local #:subdestruct3 :0x62f930) nil) (write_binding (local #:subdestruct3 :0x62f930) (attrget "car" (read_binding (local #:%ptr2 :0x62f670)))) (write_binding (local #:%ptr2 :0x62f670) (attrget "cdr" (read_binding (local #:%ptr2 :0x62f670)))) (write_binding (local patterns :0x62f7b0) (read_binding (local #:%ptr2 :0x62f670))) (write_binding (local #:%ptr4 :0x63a190) (read_binding (local #:subdestruct3 :0x62f930))) (write_binding (local el-sym :0x63a2d0) nil) (write_binding (local state-sym :0x63a450) nil) (write_binding (local state-sym :0x63a450) (attrget "car" (read_binding (local #:%ptr4 :0x63a190)))) (write_binding (local #:%ptr4 :0x63a190) (attrget "cdr" (read_binding (local #:%ptr4 :0x63a190)))) (write_binding (local el-sym :0x63a2d0) (attrget "car" (read_binding (local #:%ptr4 :0x63a190)))) (write_binding (local #:%ptr4 :0x63a190) (attrget "cdr" (read_binding (local #:%ptr4 :0x63a190)))) (write_binding (local acc :0x62ffb0) nil) (write_binding (local #:ptr5 :0x644ab0) (read_binding (local patterns :0x62f7b0))) (tagbody ((None :0x0) nop) ((#:top-loop6 :0x1) (progn (if (not_ (is_ (read_binding (local #:ptr5 :0x644ab0)) nil)) nil (go (#:exit-loop7 :0x2))) (write_binding (local pat :0x648510) (attrget "car" (read_binding (local #:ptr5 :0x644ab0)))) (write_binding (local #:%ptr8 :0x64d230) (read_binding (local pat :0x648510))) (write_binding (local body :0x64d370) nil) (write_binding (local #:subdestruct9 :0x64d4f0) nil) (write_binding (local #:subdestruct9 :0x64d4f0) (attrget "car" (read_binding (local #:%ptr8 :0x64d230)))) (write_binding (local #:%ptr8 :0x64d230) (attrget "cdr" (read_binding (local #:%ptr8 :0x64d230)))) (write_binding (local body :0x64d370) (read_binding (local #:%ptr8 :0x64d230))) (write_binding (local #:%ptr10 :0x6529b0) (read_binding (local #:subdestruct9 :0x64d4f0))) (write_binding (local el-pat :0x652af0) nil) (write_binding (local state-pat :0x652c70) nil) (write_binding (local state-pat :0x652c70) (attrget "car" (read_binding (local #:%ptr10 :0x6529b0)))) (write_binding (local #:%ptr10 :0x6529b0) (attrget "cdr" (read_binding (local #:%ptr10 :0x6529b0)))) (write_binding (local el-pat :0x652af0) (attrget "car" (read_binding (local #:%ptr10 :0x6529b0)))) (write_binding (local #:%ptr10 :0x6529b0) (attrget "cdr" (read_binding (local #:%ptr10 :0x6529b0)))) (write_binding (local acc :0x62ffb0) (call (read_binding (global builtins:cons :0x656cf0)) (call (read_binding (global backq-cons :0x656f50)) (call (read_binding (global backq-list* :0x6621d0)) 'and (call (read_binding (global make-pat-matcher :0x662470)) (read_binding (local state-sym :0x63a450)) (read_binding (local state-pat :0x652c70))) (call (read_binding (global backq-list :0x656bf0)) (call (read_binding (global make-pat-matcher :0x656570)) (read_binding (local el-sym :0x63a2d0)) (read_binding (local el-pat :0x652af0))))) (read_binding (local body :0x64d370))) (read_binding (local acc :0x62ffb0)))) (write_binding (local #:ptr5 :0x644ab0) (attrget "cdr" (read_binding (local #:ptr5 :0x644ab0)))) (go (#:top-loop6 :0x1)))) ((#:exit-loop7 :0x2) nop)) (write_binding (local acc :0x62ffb0) (call (read_binding (global builtins:cons :0x648090)) (call (read_binding (global backq-cons :0x657790)) True (call (read_binding (global backq-list :0x657b30)) (call (read_binding (global backq-list* :0x6621b0)) 'error "unhandled dispatch state=%r el=%r" (read_binding (local state-sym :0x63a450)) (call (read_binding (global backq-list :0x662b10)) (read_binding (local el-sym :0x63a2d0)))))) (read_binding (local acc :0x62ffb0)))) (call (read_binding (global backq-cons :0x662ab0)) 'cond (call (read_binding (global reverse :0x657b50)) (read_binding (local acc :0x62ffb0))))) "ll-dispatch" None ([Cons(Symbol('local'), Cons(Symbol('form1'), Cons(Symbol('0x62ca90'), nil)))]) ([]) None None)))
eval (write_binding (global make-pat-matcher :0x68dc90) (function (if (call (read_binding (global consp :0x68e730)) (read_binding (local pat :0x68d390))) (call (read_binding (global backq-cons :0x68ed30)) 'or (progn (write_binding (local acc :0x68f030) nil) (write_binding (local #:ptr13 :0x6a4c10) (read_binding (local pat :0x68d390))) (tagbody ((None :0x5) nop) ((#:top-loop14 :0x6) (progn (if (not_ (is_ (read_binding (local #:ptr13 :0x6a4c10)) nil)) nil (go (#:exit-loop15 :0x7))) (write_binding (local subpat :0x6b77d0) (attrget "car" (read_binding (local #:ptr13 :0x6a4c10)))) (write_binding (local acc :0x68f030) (call (read_binding (global builtins:cons :0x6b7b70)) (call (read_binding (global make-pat-matcher :0x6b7dd0)) (read_binding (local sym :0x68d430)) (read_binding (local subpat :0x6b77d0))) (read_binding (local acc :0x68f030)))) (write_binding (local #:ptr13 :0x6a4c10) (attrget "cdr" (read_binding (local #:ptr13 :0x6a4c10)))) (go (#:top-loop14 :0x6)))) ((#:exit-loop15 :0x7) nop)) (read_binding (local acc :0x68f030)))) (if (is_ (read_binding (local pat :0x68d390)) '*) True (if (call (read_binding (global symbolp :0x6bcfd0)) (read_binding (local pat :0x68d390))) (call (read_binding (global backq-list* :0x6bca90)) 'is (read_binding (local sym :0x68d430)) (call (read_binding (global backq-list :0x6bc6b0)) (call (read_binding (global backq-cons :0x6b7d10)) 'quote (call (read_binding (global backq-list :0x6b7030)) (read_binding (local pat :0x68d390)))))) (if True (call (read_binding (global error :0x6c2b30)) "bad pattern form %s" (read_binding (local pat :0x68d390))) nil)))) "make-pat-matcher" None ([Cons(Symbol('local'), Cons(Symbol('sym'), Cons(Symbol('0x68d430'), nil))), Cons(Symbol('local'), Cons(Symbol('pat'), Cons(Symbol('0x68d390'), nil)))]) ([]) None None))
eval (toplevel (call (read_binding (global builtins:MacroFunction :0x6d75f0)) (function (progn (progn (write_binding (local #:%ptr18 :0x6c8fb0) (call (read_binding (global builtins:clist :0x6c8d50)) &rest (read_binding (local #:form17 :0x6ccb70)))) (write_binding (local sym :0x6c82d0) nil) (write_binding (local env :0x6bca70) nil) (progn (write_binding (local env :0x6bca70) (attrget "car" (read_binding (local #:%ptr18 :0x6c8fb0)))) (write_binding (local #:%ptr18 :0x6c8fb0) (attrget "cdr" (read_binding (local #:%ptr18 :0x6c8fb0)))) (write_binding (local sym :0x6c82d0) (attrget "car" (read_binding (local #:%ptr18 :0x6c8fb0)))) (write_binding (local #:%ptr18 :0x6c8fb0) (attrget "cdr" (read_binding (local #:%ptr18 :0x6c8fb0))))) (if (call (read_binding (global symbolp :0x6b7250)) (read_binding (local sym :0x6c82d0))) nil (progn (raise1 (call (read_binding (global builtins:AssertionError :0x6b7510)) "(symbolp sym)")))) (call (read_binding (global backq-list* :0x6b74d0)) 'setq 'state (call (read_binding (global backq-list :0x6b7150)) (call (read_binding (global backq-cons :0x688d30)) 'quote (call (read_binding (global backq-list :0x6c24f0)) (read_binding (local sym :0x6c82d0)))))))) "transition" None ([Cons(Symbol('local'), Cons(Symbol('form17'), Cons(Symbol('0x6ccb70'), nil)))]) ([]) None None)))
